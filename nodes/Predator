#!/usr/bin/env python

import math

# import of relevant libraries.
import rospy # module for ROS APIs
import tf

# import msg/action/srv
from geometry_msgs.msg import Twist # message type for cmd_vel
from turtlesim.msg import Pose
from nav_msgs.msg import Odometry # message type for odom

from ppgapt.msg import Registration_msg
from ppgapt.msg import Kill_msg
from ppgapt.msg import Alive_msg
from ppgapt.msg import New_gen_msg
from ppgapt.msg import Ready_msg

from ppgapt.nodes import SimpleMotion


# Constants.
DEFAULT_PREDATOR_LINEAR_VELOCITY = 10 # m/s
CUSTOM_KILL_TOPIC = 'kill'
DEFAULT_ODOM_TOPIC = 'odom'
DEFAULT_CMD_VEL_TOPIC = "cmd_vel"
DEFAULT_REGISTRATION_TOPIC = "registration"
DEFAULT_ALIVE_TOPIC = 'alive'
DEFAULT_NEW_GENERATION_TOPIC = 'new_gen'
DEFAULT_READY_TOPIC = 'ready'

FREQUENCY = 10
MAX_DIST = 1000

class Predator():
    def __init__(self):
        """Constructor."""
        self.namespace = rospy.get_namespace()

        self.alive_robs = []
        self.odom_dict = {}

        self.preys = {}

        # pub/subs
        self._cmd_pub = rospy.Publisher(self.namespace + DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)
        self._kill_pub = rospy.Publisher(CUSTOM_KILL_TOPIC, Kill_msg, queue_size=1)
        odom_topic = self.namespace + DEFAULT_ODOM_TOPIC
        self._odom_pub_ = rospy.Publisher(odom_topic, Odometry, queue_size=1)
        self._ready_pub_ = rospy.Publisher(DEFAULT_READY_TOPIC, Ready_msg, queue_size=1)

        # create service for registration
        self._registration_sub = rospy.Subscriber(DEFAULT_REGISTRATION_TOPIC, Registration_msg, self.registration_callback)

        self._odom_sub = rospy.Subscriber(self.namespace + DEFAULT_ODOM_TOPIC, Odometry, self.odom_callback)
        self._is_alive_sub = rospy.Subscriber(DEFAULT_ALIVE_TOPIC, Alive_msg, self._is_alive_callback, queue_size=1)
        self._new_gen_sub = rospy.Subscriber(DEFAULT_NEW_GENERATION_TOPIC, New_gen_msg, self._new_gen_callback, queue_size=1)

        # vel values
        self.linear_velocity = 2 # m/s
        self.angular_velocity = math.pi/4 # rad/s

        self.x, self.y, self.theta = None, None, None

        self.start_x, self.start_y =rospy.get_param(self.namespace[:-1] + "_x"), rospy.get_namespace(self.namespace[:-1] + "_y")

    def registration_callback(self, msg):
        self.preys[msg.robotname.data] = (None,None)
        rospy.Subscriber(msg.robotname.data + "/" + DEFAULT_ODOM_TOPIC, Odometry, self.location_callback, (msg.robotname.data))

    def location_callback(self, msg, args):
        self.preys[args[0]] = (msg.pose.pose.x, msg.pose.pose.y)

    def odom_callback(self, msg):
        self.x, self.y, self.theta = msg.pose.pose.x, msg.pose.pose.y, tf.transformations.euler_from_quaternion([msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w])[2]

    def find_target_prey(self):
        while not self.preys:
            continue

        min_dist = MAX_DIST
        target = None
        for prey in self.preys:
            dist_to_prey = math.sqrt((self.x - prey[0])**2 + (self.y - prey[1]**2))
            if dist_to_prey < min_dist:
                min_dist = dist_to_prey
                target = prey

        return target 

    def run(self):
        while True:
            target = self.find_target_prey()
            target_x, target_y = self.preys[target]

            tan_angle = math.atan2(target_y - self.y, target_x - self.x)

            angle = tan_angle - self.theta

            twist_msg = Twist()
            twist_msg.angular.z = angle
            twist_msg.linear.x = DEFAULT_PREDATOR_LINEAR_VELOCITY
            self._cmd_pub.publish(twist_msg)

    def kill_prey(self):
        rospy.init_node("Predator")
        predator = Predator()
        rospy.sleep(2)
        rospy.on_shutdown(predator.stop)

        # Update velocities
        try:
            kill_msg = Kill_msg()
            kill_msg.robot_name = self.namespace
            self._kill_pub.publish(kill_msg)

        except rospy.ROSInterruptException:
            rospy.logerr("ROS node interrupted.")

    def _is_alive_callback(self, msg):
        self.alive_robs.append(msg.robot_name)

    def _new_gen_callback(self, msg):
        # calls back all robot's to their initial pos
        rot = math.atan2(self.start_y - self.y, self.start_x - self.x) - self.theta
        dist = math.sqrt((self.x - self.start_x)**2 + (self.y - self.start_y)**2)

        SimpleMotion.rotate_in_place(rot)
        SimpleMotion.move_forward(dist)
        SimpleMotion.rotate_in_place(-self.theta)

        ready_msg = Ready_msg
        ready_msg.ready = True

        self._ready_pub_.publish(ready_msg)


def main():
    """Main function."""

    # 1st. initialization of node.s
    rospy.init_node('predator')

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    # Initialization of the class for the Leader.
    predator = Predator()

    rospy.sleep(2)
    predator.run()


if __name__ == "__main__":
    """Run the main function."""
    main()
