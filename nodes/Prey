#!/usr/bin/env python

import math

# import of relevant libraries.
import rospy # module for ROS APIs
import tf
import random

# import msg/action/srv
from geometry_msgs.msg import Twist # message type for cmd_vel
from sensor_msgs.msg import LaserScan # message type for scan
from nav_msgs.msg import Odometry # message type for odom
from turtlesim.msg import Pose

# Custom messages
from ppgapt.msg import Registration_msg
from ppgapt.msg import Alive_msg
from ppgapt.msg import Kill_msg
from ppgapt.msg import Ready_msg
from ppgapt.msg import New_gen_msg


# Constants
FREQUENCY = 10 #Hz.
LASER_ANGLE_FRONT = 0 # radians
LINEAR_VELOCITY = 0.2 # m/s
ANGULAR_VELOCITY = math.pi/4 # rad/s
MIN_THRESHOLD_DISTANCE = 1.5 # m, threshold distance.
MIN_LINEAR_VEL = 0.05 # m/s
MAX_LINEAR_VEL = 2.00 # m/s
MIN_ANGULAR_VEL = math.pi/8 # rad/s
MAX_ANGULAR_VEL = math.pi # rad/s

DEFAULT_ODOM_TOPIC = 'odom'
DEFAULT_CMD_VEL_TOPIC = "cmd_vel"
DEFAULT_REGISTRATION_TOPIC = "/registration"
DEFAULT_LASER_TOPIC = 'base_scan'
DEFAULT_ALIVE_TOPIC = '/alive'
CUSTOM_KILL_TOPIC = '/kill'
DEFAULT_NEW_GENERATION_TOPIC = '/new_gen'
DEFAULT_READY_TOPIC = '/ready'


class Prey():
    def __init__(self):

        # Parameters and variables
        self.angular_velocity = 0
        self.linear_velocity = 0
        self.namespace = rospy.get_namespace()
        self._close_obstacle = None
        self.new_gen = False
        self.start_x, self.start_y = rospy.get_param(self.namespace[:-1] + "_x"), rospy.get_param(self.namespace[:-1] + "_y")
        self.x, self.y, self.theta = None, None, None
        self.is_alive = True
        self.odom_dict = {}

        # Set up publishers
        cmd_vel_topic = self.namespace + DEFAULT_CMD_VEL_TOPIC
        self._cmd_pub = rospy.Publisher(cmd_vel_topic, Twist, queue_size=1)
        self._ready_pub_ = rospy.Publisher(DEFAULT_READY_TOPIC, Ready_msg, queue_size=1)
        
        odom_topic = self.namespace + DEFAULT_ODOM_TOPIC
        self._odom_pub_ = rospy.Publisher(odom_topic, Odometry, queue_size=1)

        # Register prey robot with predators
        self._registration_pub = rospy.Publisher(DEFAULT_REGISTRATION_TOPIC, Registration_msg, queue_size=1)
        
        # Set up subscribers
        self._laser_sub = rospy.Subscriber(DEFAULT_LASER_TOPIC, LaserScan, self._laser_callback, queue_size=1)
        self._is_alive_sub = rospy.Subscriber(DEFAULT_ALIVE_TOPIC, Alive_msg, self._is_alive_callback, queue_size=1)
        self._odom_sub = rospy.Subscriber(odom_topic, Odometry, self._odom_callback, queue_size=1)
        self._kill_sub = rospy.Subscriber(CUSTOM_KILL_TOPIC, Kill_msg, self._kill_callback, queue_size=1)
        self._new_gen_sub = rospy.Subscriber(DEFAULT_NEW_GENERATION_TOPIC, New_gen_msg, self._new_gen_callback, queue_size=1)

    # method to avoid predators using separation
    def evade(self):
        # if alive, register yourself to the predator and master nodes
        if self.is_alive:
            registration_msg = Registration_msg()
            registration_msg.robotname.data = self.namespace
            self._registration_pub.publish(registration_msg)

        # if still moving, and a new generation has not begun, randomly walk
        if self.angular_velocity != 0 and self.linear_velocity != 0 and not self.new_gen:
            self.rotate_in_place(random.uniform(0, 2*math.pi))
            self.move_forward(random.uniform(1, 3))
    
    # CALLBACK FUNCTIONS

    # sets alive variable to true and sets linear and angular velocity    
    def _is_alive_callback(self, msg):
        if msg.robot_name == self.namespace:
            print(self.namespace, " alive!")
            self.is_alive = True
            self.linear_velocity = msg.linear_vel
            self.angular_velocity = msg.angular_vel

    # extract position and rotation from odom message
    def _odom_callback(self, msg):
        self.x, self.y, self.theta = msg.pose.pose.position.x, msg.pose.pose.position.y, tf.transformations.euler_from_quaternion([msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w])[2]

    # if killed, stop and set alive to False
    def _kill_callback(self, msg):
        if msg.robot_name == self.namespace:
            print(msg.robot_name + "killed")
            self.stop()
            self.is_alive = False
            self.angular_velocity = 0
            self.linear_velocity = 0

    # method for handling starting the next generation of robots
    def _new_gen_callback(self, msg):

        self.new_gen = True

        # calls back all robot's to their initial pos
        rot = math.atan2(self.start_y - self.y, self.start_x - self.x) - self.theta
        dist = math.sqrt((self.x - self.start_x)**2 + (self.y - self.start_y)**2)

        # clamp rotation angle to between 0 and 2pi
        while rot < 0:
            rot += (2*math.pi)
        while rot > (2*math.pi):
            rot -= (2*math.pi)

        # drive back to the waypoint
        if self.x != None:
            self.linear_velocity = 1
            self.angular_velocity = math.pi /4
            self.rotate_in_place(rot)
            rospy.sleep(2)
            self.move_forward(dist)
            self.rotate_in_place((2*math.pi)-self.theta)
    
        self.linear_velocity = 0
        self.angular_velocity = 0

        ready_msg = Ready_msg()
        ready_msg.ready = True

        # publish that the current robot is ready
        self._ready_pub_.publish(ready_msg)
        self.new_gen = False

    def move_forward(self, distance):
        """Function to move_forward for a given distance."""
        # Rate at which to operate the while loop.
        rate = rospy.Rate(FREQUENCY)

        # Setting velocities. 
        twist_msg = Twist()
        twist_msg.linear.x = self.linear_velocity
        start_time = rospy.get_rostime()
        if twist_msg.linear.x != 0:
            duration = rospy.Duration(distance/twist_msg.linear.x)
        else:
            duration = rospy.Duration(0)

        # Loop.
        while not rospy.is_shutdown():
            # Check if traveled of given distance based on time.
            if rospy.get_rostime() - start_time >= duration:
                break

            # Publish message.
            if self._close_obstacle:
                self.stop()
            else:
                self._cmd_pub.publish(twist_msg)

            # Sleep to keep the set publishing frequency.
            rate.sleep()

        # Traveled the required distance, stop.
        self.stop()
        
    def rotate_in_place(self, rotation_angle):
        """
        Rotate in place the robot of rotation_angle (rad) based on fixed velocity.
        Assumption: Counterclockwise rotation.
        """
        twist_msg = Twist()
        twist_msg.angular.z = self.angular_velocity
        
        if twist_msg.angular.z != 0:
            duration = rotation_angle / twist_msg.angular.z
        else:
            duration= 0
            
        start_time = rospy.get_rostime()
        rate = rospy.Rate(FREQUENCY)
        while not rospy.is_shutdown():
            # Check if done
            if rospy.get_rostime() - start_time >= rospy.Duration(duration):
                break
                
            # Publish message.
            self._cmd_pub.publish(twist_msg)
            
            # Sleep to keep the set frequency.
            rate.sleep()

        # Rotated the required angle, stop.
        self.stop()

    def stop(self):
        """Stop the robot."""
        twist_msg = Twist()
        self._cmd_pub.publish(twist_msg)



    def _laser_callback(self, msg):
        """Processing of laser message."""
        # Access to the index of the measurement in front of the robot.
        # NOTE: assumption: the one at angle 0 corresponds to the front.
        i = int((LASER_ANGLE_FRONT - msg.angle_min) / msg.angle_increment)
        if msg.ranges[i] <= MIN_THRESHOLD_DISTANCE:
            self._close_obstacle = True
        
        else:
            self._close_obstacle = False


def main():
    """Main function."""

    # 1st. initialization of node.
    rospy.init_node("Prey")
       
    # Initialize variables
    freq = 10

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    # Initialization of the class for the predator evasion motion
    prey = Prey()

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    rospy.on_shutdown(prey.stop)

    # Update velocities
    try:
        rate = rospy.Rate(freq)

        while not rospy.is_shutdown():
            if prey.is_alive:
                prey.evade()

            rate.sleep()

    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")

if __name__ == "__main__":
    """Run the main function."""
    main()
